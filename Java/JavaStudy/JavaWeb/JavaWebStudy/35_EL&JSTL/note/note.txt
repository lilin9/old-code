1、EL表达式
	a）含义及作用：
		EL表达式的全称是：Exception Language，是一种表达式语言。
		El表达式的主要作用是替代jsp页面中的表达式脚本在jsp页面中进行数据的输出。
		因为EL表达式在输出数据的时候，要比jsp表达式脚本简介很多。

		El表达式的格式是：${表达式}
		EL表达式在输出null值的时候，输出的是空串；JSP表达式脚本输出null值的时候，输出的是null字符。

	b）EL表达式搜索域数据的顺序
		EL表达式主要是在JSP页面中域对象中的数据。
		当四个域中都有相同的key值时，EL表达式会按照四个域从小到大的顺序去搜索输出。

	c）EL表达式输出Bean的普通属性，数组属性，List集合属性，map集合属性
		<body>
			输出：${person}
			输出Person的phones数组:${person.phones} <br>
			输出Person的phones数组属性值:${person.phones[0]} <br>
			输出Person的Map集合：${person.map} <br>
			输出Person的Map集合中某个key的值：${person.map.key1} <br>
		</body>

	d）EL表达式-运算
		语法： ${运算表达式}，EL表达式支持如下运算符：
		（1）关系运算
			……

		（2）逻辑运算
			……

		（3）算术运算
			……

		（4）empty运算
			语法：${empty 表达式}

			empty运算可以判断一个数据是否为空，为空则输出true
			以下几种情况为空：
				①、值为null值的时候
				②、值为空串的时候
				③、值是Object类型数组，但长度为零的时候
				④、list集合，元素个数为零
				⑤、map集合，元素个数为零

		（5）三元运算
			表达式1 ？ 表达式2 : 表达式3
			如果表达式1为true，返回表达式2的值；否则返回表达式3的值

		（6）“.”点运算和[]中括号运算符
			例：${person.phones[2]}

	e）EL表达式的11个隐含对象
		El表达式中11个隐含对象，是EL表达式中自己定义，可以直接使用

			变量						类型									作用
		pageContext				PageContextImpl				它可以获取jsp中的九大内置对象

		pageScope				Map<String,Object>			它可以获取 pageContext 域中的数据
		requestScope			Map<String,Object>			它可以获取 Request 域中的数据
		sessionScope			Map<String,Object>			它可以获取 Session 域中的数据
		applicationScope		Map<String,Object>			它可以获取 ServletContext 域中的数据

		param					Map<String,String>			它可以获取请求参数的值
		paramValues				Map<String,String[]>		它可以获取请求参数的值，获取多个值的时候使用

		header 					Map<String,String>			它可以获取请求头的信息
		headerValues			Map<String,String[]>		它可以获取请求头的信息，可以获取多个值的情况

		cookie					Map<String,Cookie>			它可以获取请求的 Cookie 信息

		initParam				Map<String,String>			它可以获取在 web.xml 中配置的<context-param>上下文参数

		（1）El获取四个特定域中的属性
			pageScope				-->			pageContext域
			requestScope			-->			Request域
			sessionScope			-->			Session域
			applicationScope		-->			ServletContext域

		（2）pageContext对象的使用
			①、获取协议
			②、获取服务器ip
			③、获取服务器端口
			④、获取工程路径
			⑤、获取请求方法
			⑥、获取客户端ip地址
			⑦、获取会话的id编号


2、JSTL标签库
	JSTL标签库，全称是 JSP Standard Tag Library（JSP标准标签库），是一个不断完善的开放源代码的JSP标签库。
	EL表达式主要为了替换JSP中的表达式脚本，而JSTL标签库则是为了替换代码脚本，这样使得整个JSP页面变得更加简洁。

	JSTL由五个不同功能的标签库组成：
		功能范围								URI								前缀
		核心标签库（重点）		http://java.sun.com/jsp/jstl/core 			c
		格式化					http://java.sun.com/jsp/jstl/fmt			fmt
		函数						http://java.sun.com/jsp/jstl/functions		fn
		数据库（不使用）			http://java.sun.com/jsp/jstl/sql			sql
		XML（不使用）			http://java.sun.com/jsp/jstl/xml			x

	a）JSTL标签库的使用步骤
		（1）先导入jstl标签库的jar包。
		（2）使用taglib指令导入标签库。
			<%@ taglib prefix="c" url="http://java.sun.com/jsp/jstl/core" %>

	b）core核心库使用
		（1）<c:set/>
			作用：set标签可以往域中保存数据
			格式：
				<c:set scope="request" var="abc" value="abc"/>

		（2）<c:if/>
			作用：if标签用来做if判断
			格式：
				<c:if test="${12 == 12}">
				    <h1>12 等于 12 成立</h1>		<!-- test属性表示判断的条件（使用EL表达式输出） -->
				</c:if>

		（3）<c:choose><c:when><c:otherwise>
			作用：多路判断，类似于 switch...case...default
			格式：
				<c:choose>
			        <c:when test="${requestScope.height > 190}">
			            <h1>好大</h1>
			        </c:when>

			        <c:when test="${requestScope.height > 170}">
			            <h1>还行</h1>
			        </c:when>
			    
			        <c:otherwise>
			            <h1>好小</h1>
			        </c:otherwise>
			    </c:choose>

			注意：
				①标签里不可以使用html注释，需要使用jsp注释
				②、when标签的父标签一定要是choose标签

		（4）<c:forEach/>
			作用：遍历输出使用
			格式：
				<c:forEach var="i" begin="1" end="10">
				    ${ i }
				</c:forEach>

			遍历输出多个值：
				<%
				    request.setAttribute("arr", new String[]{"胡歌","霍建华","吴磊","刘亦菲","尊龙"});
				%>
				<c:forEach items="${requestScope.arr}" var="item">
				    ${item}
				</c:forEach>

			说明：
				items：表示遍历的集合
				var：表示遍历到的数据
				begin：表示遍历开始的索引值
				end：表示结束的索引值
				step：表示遍历的步长
				varStatus：表示当前遍历到的数据的状态