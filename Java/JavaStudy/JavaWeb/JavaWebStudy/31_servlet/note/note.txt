什么是Servlet？
	1、Servlet是JavaEE规范（接口）之一
	2、Servlet是JavaWeb三大组件之一。三大组件分别是：Servlet程序、Filter过滤器、Listener监听器
	3、Servlet是运行在服务器上的一个Java小程序，可以接受客户端发送过来的请求，并响应数据给客户端

手动实现Servlet程序
	1、编写一个类去实现Servlet接口
	2、实现Servlet方法，处理请求，并响应数据
	3、到web.xml中去配置servlet程序的访问地址


servlet的生命周期
	1、执行servlet构造器方法
	2、执行init初始化方法
	3、执行service方法
	4、执行destroy销毁方法

	第1、2步在第一次访问的时候创建servlet程序时会调用；
	第3步每次访问都会调用；
	第4步在web工程停止的时候会调用。


通过继承 HttpServlet 实现 Servlet 程序
	一般在实际项目开发中，都是使用继承HttpServlet类的方式去实现Servlet程序

	1、编写一个类去继承 HTTPServlet 类
	2、根据业务需要重写 doGet 或 doPost 方法
	3、在web.xml中配置 Servlet 程序的访问地址


Servlet类的继承关系：
	javax.servelet Interface Servlet
		->	Servlet接口，只是负责定义Servlet程序的访问规范

	javax.servlet Class GenericServlet（↑实现接口）
		->	GenericServlet类实现了Servlet接口，做了很多空实现；并持有一个ServletConfig类的引用，
			并对ServletConfig的使用做一些方法

	javax.servlet.http Class HttpServlet（↑继承）
		->	HttpServlet抽取类实现了Servlet()方法，并实现了请求的分发处理

	自定义的Servlet程序（↑继承）
		->	根据自身业务需求重写doGet()或者doPost()方法即可


ServletConfig类（Servlet程序的配置信息类）
	a）ServletConfig类的三大作用：
		1、可以获取Servlet程序的别名 servlet-name 的值
		2、获取初始化参数 init-param
		3、获取 ServletContext 对象

	b）Servlet程序和ServletConfig对象都是由Tomcat负责创建，用户负责使用；
	   Servlet程序默认是第一次访问的时候创建，ServletConfig是每个Servlet程序创建时，就创建一个对应的ServletConfig对象。


ServletContext类
	a）什么是ServletContext？
		1、ServletContext是一个接口，他表示Servlet上下文对象
		2、一个web工程，只有一个ServletContext对象实例
		3、ServletContext对象是一个域对象
		4、ServletContext是在web工程部署启动的时候创建，在web工程停止的时候销毁。

		域对象：指可以像Map一样存取数据的对象，叫做域对象。这里的域对象指的是存取数据的操作范围。（域：整个web工程）

						存对象 				取数据 				删除数据
		Map 			put()				get()				remove()
		域对象 		setAttribute()		getAttribute()		removeAttribute()

	b）ServletContext类的四个作用
		1、获取web.xml中配置的上下文参数 context-param
		2、获取当前的工程路径，格式： /工程路径
		3、获取工程部署后在服务器硬盘上的绝对路径
		4、像Map一样存取数据


HttpServletRequest类
	a）HttpServletRequest类有什么作用
		每次只要有请求进入到Tomcat服务器，Tomcat服务器就会把请求过来的HTTP协议信息解析好封装到Request对象中。然后传递到service方法（doGet和doPost）中以供使用，我们可以通过HttpServletRequest对象，获取到所有请求的信息。

	b）HttpServletRequest类的常用方法
		1、getRequestURI()					获取请求的资源路径
		2、getRequestURL()					获取请求的统一资源定位符（绝对路径）(url = uri + 协议 + 主机)
		3、getRemoteHost()					获取客户端的ip地址
		4、getHeader()						获取请求头
		5、getParameter()					获取请求的参数
		6、getParameterValues() 				获取请求的参数（具有多个值的时候使用）
		7、getMethod()						获取请求的方式（get或post）
		8、setAttribute(key, value) 			设置域数据
		9、getAttribute(key)					获取域数据
		10、getRequestDispatcher()			获取请求转发对象

	c）请求的转发
		含义：指服务器收到请求后，从一个资源跳到另一个资源的操作。
		请求转发的特点：
			1、浏览器地址栏没有变化
			2、只有一次请求
			3、它们共享Request域中的数据
			4、可以转发到 WEB-INF 目录下
			5、是否可以访问到工程以外的资源：否

	d）base标签的作用
		base标签可以设置当前页面中所有相对路径工作时，可以参照跳转的路径。
		<base href="http://localhost:8080/xxx">		href 属性就是参数的地址值

	e）web中 "/" 的不同意义
		在web中 "/" 是一种绝对路径

		1、"/" 如果被浏览器解析，得到的地址是：http://ip:port/
			<a href="/">斜杠</a>

		2、"/" 如果被服务器解析，得到的地址是：http://ip:port/工程路径
			（1）<url-pattern>/servlet1</url-pattern>
			（2）servletContext.getRealPath("/");
			（3）request.getRequestDispatcher("/");

		特殊情况：response.sendRediect("/");		把斜杠发送给浏览器解析，得到：http://ip:port/


HttpServletResponse类
	a）HttpServletResponse类的作用
		HttpServletResponse类和HttpServletRequest类一样，每次请求，Tomcat服务器都会创建一个 Response 对象传递给Servlet程序使用。HttpServletRequest表示请求过来的信息，HttpServletResponse表示所有响应的信息。
		如果需要设置返回给客户端的信息，都可以通过HTTPServletResponse对象进行设置。

	b）两个输出流的说明
		字节流		getOutputStream();		常用于下载（传递二进制数据）
		字符流		getWriter();			常用于回传字符串（常用）

		注意：两者只能同时使用一个。

	c）解决响应中的中文乱码问题
		方式一：resp.setCharacterEncoding("UTF-8")							//设置服务器字符集为UTF-8
			   resp.setHeader("Content-Type", "text/html;charset=UTF-8");	//设置浏览器字符集为UTF-8

		方式二：resp.setContentType("text/html;charset=UTF-8");				//同时设置了服务器和客户端都是用UTF-8字符集
		注意：此方法一定要在获取流对象之前使用才有效

	d）请求重定向
		1、含义：指客户端给服务端发送请求，然后服务器告诉客户端新地址，让客户端重新访问新地址，叫做重定向（原地址可能已经废弃）

		2、请求重定向的特点：
			（1）浏览器地址栏会发生变化
			（2）两次请求
			（3）不共享Request域中的数据
			（4）不能访问WEB-INF下的资源
			（5）可以访问工程外的资源。

		3、请求重定向的方案：
			（1）resp.setStatus(302);	//设置响应状态码302，表示重定向（已搬迁）
				 resp.setHeader("Location", "http://localhost:8080");	//设置响应头，说明新地址在哪

			（2）resp.sendRedirect("http://localhost:8080");	（推荐使用）